generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @db.Char(18)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  counts   Json?
  creditAt DateTime?
  admin    Boolean   @default(false)

  playlists Playlist[]
  issues    Issue[]
}

model Playlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Char(18)

  name String @db.VarChar(100)

  songs  Song[]
  albums Album[]

  @@unique([userId, name])
}

model Album {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlists Playlist[]

  name String @db.VarChar(100)
  data Json

  songs Song[]
}

model Song {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String?
  album      Album?    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId    String?

  title         String @db.Text
  duration      Int    @db.UnsignedInt
  data          Json
  playlistIndex Int?   @db.UnsignedInt
  albumIndex    Int?   @db.UnsignedInt

  @@index([playlistId, playlistIndex])
  @@index([albumId, albumIndex])
}

model Ratio {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content String @unique
}

model File {
  id        BigInt   @id
  createdAt DateTime @default(now())

  base String
  name String
  ext  String

  authorId  BigInt
  messageId BigInt
  channelId BigInt
  guildId   BigInt

  proxyURL String @db.Text

  @@index([createdAt])
  @@index([base])
  @@index([name])
  @@index([ext])
  @@index([authorId])
  @@index([messageId])
  @@index([channelId])
  @@index([guildId])
}

model Y7File {
  name String @id @db.VarChar(100)

  extension String @db.VarChar(4)
}

model Chicken {
  name String @id @db.VarChar(100)

  sentAt DateTime?
}

model SpeechBubble {
  name String @id @db.VarChar(100)

  sentAt DateTime?
}

model HopOn {
  id String @id

  sentAt DateTime?
}

model KraccBacc {
  name String @id

  sentAt DateTime?
}

model BossFile {
  id String @id @default(cuid())

  url    String    @db.Text
  sentAt DateTime?
}

model Issue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Char(18)

  name     String       @db.VarChar(100)
  type     IssueType
  desc     String       @db.Text
  closedAt DateTime?
  reason   IssueReason?

  @@index([userId])
}

enum IssueType {
  Bug
  Feature
  Enhancement
}

enum IssueReason {
  Completed
  WontFix
  Duplicate
  Invalid
}

model RotatingFood {
  name String @id @db.VarChar(100)
}

model AudioFilter {
  name  String @id @db.VarChar(100)
  value String
}

model CommandExecution {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name String
  type CommandType

  userId    BigInt
  messageId BigInt?
  channelId BigInt
  guildId   BigInt?

  @@index([createdAt])
  @@index([name])
  @@index([messageId])
  @@index([channelId])
  @@index([guildId])
}

enum CommandType {
  Text
  Slash
  Message
}
