generator client {
  provider = "prisma-client-js"
  output   = "../generated/main"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @db.Char(18)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

  counts   Json?
  creditAt DateTime? @map("credit_at") @db.Timestamp
  admin    Boolean   @default(false)

  playlists Playlist[]
  issues    Issue[]

  @@map("users")
}

model Playlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.Char(18)

  name String @db.VarChar(100)

  songs  Song[]
  albums Album[]

  @@unique([userId, name])
  @@map("playlists")
}

model Album {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

  playlists Playlist[]

  name String @db.VarChar(100)
  data Json

  songs Song[]

  @@map("albums")
}

model Song {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

  playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String?
  album      Album?    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId    String?

  title         String @db.Text
  duration      Int
  data          Json
  playlistIndex Int?   @map("playlist_index")
  albumIndex    Int?   @map("album_index")

  @@index([playlistId, playlistIndex])
  @@index([albumId, albumIndex])
  @@map("songs")
}

model Ratio {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  content String @unique

  @@map("ratios")
}

model Y7File {
  name String @id @db.VarChar(100)

  extension String @db.VarChar(4)

  @@map("y7_files")
}

model Chicken {
  name String @id @db.VarChar(100)

  sentAt DateTime? @map("sent_at") @db.Timestamp

  @@map("chickens")
}

model SpeechBubble {
  name String @id @db.VarChar(100)

  sentAt DateTime? @map("sent_at") @db.Timestamp

  @@map("speech_bubbles")
}

model HopOn {
  id String @id

  sentAt DateTime? @map("sent_at") @db.Timestamp

  @@map("hop_ons")
}

model KraccBacc {
  name String @id

  sentAt DateTime? @map("sent_at") @db.Timestamp

  @@map("kracc_bacc_videos")
}

model BossFile {
  id String @id @default(cuid())

  url    String    @db.Text
  sentAt DateTime? @map("sent_at") @db.Timestamp

  @@map("boss_files")
}

model Issue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id") @db.Char(18)

  name     String       @db.VarChar(100)
  type     IssueType
  desc     String       @db.Text
  closedAt DateTime?    @map("closed_at") @db.Timestamp
  reason   IssueReason?

  @@index([userId])
  @@map("issues")
}

enum IssueType {
  Bug         @map("bug")
  Feature     @map("feature")
  Enhancement @map("enhancement")
}

enum IssueReason {
  Completed @map("completed")
  WontFix   @map("wont_fix")
  Duplicate @map("duplicate")
  Invalid   @map("invalid")
}

model RotatingFood {
  name String @id @db.VarChar(100)

  @@map("rotating_food")
}

model AudioFilter {
  name  String @id @db.VarChar(100)
  value String

  @@map("audio_filters")
}

model CommandExecution {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp

  name String
  type CommandType

  userId    BigInt  @map("user_id")
  messageId BigInt? @map("message_id")
  channelId BigInt  @map("channel_id")
  guildId   BigInt? @map("guild_id")

  @@map("command_executions")
}

enum CommandType {
  Text    @map("text")
  Slash   @map("slash")
  Message @map("message")
}
