/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/random/": {
    /** Random */
    get: operations["random__random__get"];
  };
  "/info/": {
    /**
     * Image Info 
     * @description Image infos
     */
    get: operations["image_info_info__get"];
  };
  "/endpoints/": {
    /**
     * Endpoints  
     * @description endpoints with and without info
     */
    get: operations["endpoints__endpoints__get"];
  };
  "/tags/": {
    /**
     * Endpoints  
     * @description endpoints with and without info
     */
    get: operations["endpoints__tags__get"];
  };
  "/test/": {
    /**
     * Test  
     * @description A test route to see the difference in response time with and without a sql query
     */
    get: operations["test__test__get"];
  };
  "/fav/": {
    /**
     * Fav  
     * @description fetch a user favourite gallery
     */
    get: operations["fav__fav__get"];
  };
  "/fav/insert/": {
    /**
     * Fav Insert 
     * @description Add an image to a user favourites.
     */
    post: operations["fav_insert_fav_insert__post"];
  };
  "/fav/delete/": {
    /**
     * Fav Delete 
     * @description Remove an image from a user favourites.
     */
    delete: operations["fav_delete_fav_delete__delete"];
  };
  "/fav/toggle/": {
    /**
     * Fav Toggle 
     * @description Remove or add an image to the user favourites, depending on if it is already in.
     */
    post: operations["fav_toggle_fav_toggle__post"];
  };
  "/report/": {
    /**
     * Report 
     * @description Report an image.
     */
    get: operations["report_report__get"];
  };
}

export interface components {
  schemas: {
    /**
     * CustomBool 
     * @description An enumeration. 
     * @enum {string}
     */
    CustomBool: "true" | "false" | "null";
    /**
     * FavOrderByType 
     * @description An enumeration. 
     * @enum {string}
     */
    FavOrderByType: "FAVOURITES" | "UPLOADED_AT" | "LIKED_AT";
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** ImageModel */
    ImageModel: {
      /** Signature */
      signature: string;
      /** Extension */
      extension: string;
      /** Image Id */
      image_id: number;
      /** Favourites */
      favourites: number;
      /** Dominant Color */
      dominant_color: string;
      /** Source */
      source?: string;
      /** Uploaded At */
      uploaded_at: string;
      /**
       * Is Nsfw 
       * @default false
       */
      is_nsfw?: boolean;
      /** Width */
      width: number;
      /** Height */
      height: number;
      /** Url */
      url: string;
      /** Preview Url */
      preview_url: string;
      /** Tags */
      tags: (components["schemas"]["TagModel"])[];
    };
    /**
     * ImageOrientation 
     * @description An enumeration. 
     * @enum {string}
     */
    ImageOrientation: "LANDSCAPE" | "PORTRAIT";
    /** ImageResponseModel */
    ImageResponseModel: {
      /** Images */
      images: (components["schemas"]["ImageModel"])[];
    };
    /**
     * OrderByType 
     * @description An enumeration. 
     * @enum {string}
     */
    OrderByType: "FAVOURITES" | "UPLOADED_AT";
    /** TagModel */
    TagModel: {
      /** Tag Id */
      tag_id: number;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Is Nsfw 
       * @default false
       */
      is_nsfw?: boolean;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  random__random__get: {
    /** Random */
    parameters?: {
      query?: {
        is_nsfw?: components["schemas"]["CustomBool"];
        selected_tags?: (string)[];
        excluded_tags?: (string)[];
        excluded_files?: (string)[];
        gif?: boolean;
        order_by?: components["schemas"]["OrderByType"];
        orientation?: components["schemas"]["ImageOrientation"];
        many?: boolean;
        full?: boolean;
      };
      header?: {
        authorization?: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageResponseModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  image_info_info__get: {
    /**
     * Image Info 
     * @description Image infos
     */
    parameters: {
      query: {
        images: (string)[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageResponseModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  endpoints__endpoints__get: {
    /**
     * Endpoints  
     * @description endpoints with and without info
     */
    parameters?: {
      query?: {
        full?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  endpoints__tags__get: {
    /**
     * Endpoints  
     * @description endpoints with and without info
     */
    parameters?: {
      query?: {
        full?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  test__test__get: {
    /**
     * Test  
     * @description A test route to see the difference in response time with and without a sql query
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  fav__fav__get: {
    /**
     * Fav  
     * @description fetch a user favourite gallery
     */
    parameters?: {
      query?: {
        is_nsfw?: components["schemas"]["CustomBool"];
        selected_tags?: (string)[];
        excluded_tags?: (string)[];
        excluded_files?: (string)[];
        gif?: boolean;
        order_by?: components["schemas"]["FavOrderByType"];
        orientation?: components["schemas"]["ImageOrientation"];
        user_id?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageResponseModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  fav_insert_fav_insert__post: {
    /**
     * Fav Insert 
     * @description Add an image to a user favourites.
     */
    parameters: {
      query: {
        image: string;
        user_id?: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  fav_delete_fav_delete__delete: {
    /**
     * Fav Delete 
     * @description Remove an image from a user favourites.
     */
    parameters: {
      query: {
        image: string;
        user_id?: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  fav_toggle_fav_toggle__post: {
    /**
     * Fav Toggle 
     * @description Remove or add an image to the user favourites, depending on if it is already in.
     */
    parameters: {
      query: {
        image: string;
        user_id?: Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  report_report__get: {
    /**
     * Report 
     * @description Report an image.
     */
    parameters: {
      query: {
        image: string;
        user_id?: number;
        description?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
