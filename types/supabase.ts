/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/_prisma_migrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_prisma_migrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/playlists": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.playlists.id"];
          created_at?: parameters["rowFilter.playlists.created_at"];
          updated_at?: parameters["rowFilter.playlists.updated_at"];
          uid?: parameters["rowFilter.playlists.uid"];
          name?: parameters["rowFilter.playlists.name"];
          songs?: parameters["rowFilter.playlists.songs"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["playlists"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** playlists */
          playlists?: definitions["playlists"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.playlists.id"];
          created_at?: parameters["rowFilter.playlists.created_at"];
          updated_at?: parameters["rowFilter.playlists.updated_at"];
          uid?: parameters["rowFilter.playlists.uid"];
          name?: parameters["rowFilter.playlists.name"];
          songs?: parameters["rowFilter.playlists.songs"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.playlists.id"];
          created_at?: parameters["rowFilter.playlists.created_at"];
          updated_at?: parameters["rowFilter.playlists.updated_at"];
          uid?: parameters["rowFilter.playlists.uid"];
          name?: parameters["rowFilter.playlists.name"];
          songs?: parameters["rowFilter.playlists.songs"];
        };
        body: {
          /** playlists */
          playlists?: definitions["playlists"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/y7_images": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.y7_images.id"];
          file_name?: parameters["rowFilter.y7_images.file_name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["y7_images"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** y7_images */
          y7_images?: definitions["y7_images"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.y7_images.id"];
          file_name?: parameters["rowFilter.y7_images.file_name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.y7_images.id"];
          file_name?: parameters["rowFilter.y7_images.file_name"];
        };
        body: {
          /** y7_images */
          y7_images?: definitions["y7_images"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          counts?: parameters["rowFilter.users.counts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          counts?: parameters["rowFilter.users.counts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          created_at?: parameters["rowFilter.users.created_at"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          counts?: parameters["rowFilter.users.counts"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/ratios": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ratios.id"];
          created_at?: parameters["rowFilter.ratios.created_at"];
          text?: parameters["rowFilter.ratios.text"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["ratios"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** ratios */
          ratios?: definitions["ratios"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ratios.id"];
          created_at?: parameters["rowFilter.ratios.created_at"];
          text?: parameters["rowFilter.ratios.text"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.ratios.id"];
          created_at?: parameters["rowFilter.ratios.created_at"];
          text?: parameters["rowFilter.ratios.text"];
        };
        body: {
          /** ratios */
          ratios?: definitions["ratios"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/get_random_images": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: smallint */
            n: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_random_ratios": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: smallint */
            n: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  _prisma_migrations: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: character varying */
    checksum: string;
    /** Format: timestamp with time zone */
    finished_at?: string;
    /** Format: character varying */
    migration_name: string;
    /** Format: text */
    logs?: string;
    /** Format: timestamp with time zone */
    rolled_back_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    started_at: string;
    /**
     * Format: integer
     * @default 0
     */
    applied_steps_count: number;
  };
  playlists: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /** Format: timestamp without time zone */
    updated_at: string;
    /** Format: character */
    uid: string;
    /** Format: text */
    name: string;
    /** Format: ARRAY */
    songs?: unknown[];
  };
  y7_images: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    file_name: string;
  };
  users: {
    /**
     * Format: character
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /** Format: timestamp without time zone */
    updated_at: string;
    /** Format: jsonb */
    counts?: unknown;
  };
  ratios: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /** Format: text */
    text: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description _prisma_migrations */
  "body._prisma_migrations": definitions["_prisma_migrations"];
  /** Format: character varying */
  "rowFilter._prisma_migrations.id": string;
  /** Format: character varying */
  "rowFilter._prisma_migrations.checksum": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.finished_at": string;
  /** Format: character varying */
  "rowFilter._prisma_migrations.migration_name": string;
  /** Format: text */
  "rowFilter._prisma_migrations.logs": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.rolled_back_at": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.started_at": string;
  /** Format: integer */
  "rowFilter._prisma_migrations.applied_steps_count": string;
  /** @description playlists */
  "body.playlists": definitions["playlists"];
  /** Format: bigint */
  "rowFilter.playlists.id": string;
  /** Format: timestamp without time zone */
  "rowFilter.playlists.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.playlists.updated_at": string;
  /** Format: character */
  "rowFilter.playlists.uid": string;
  /** Format: text */
  "rowFilter.playlists.name": string;
  /** Format: ARRAY */
  "rowFilter.playlists.songs": string;
  /** @description y7_images */
  "body.y7_images": definitions["y7_images"];
  /** Format: bigint */
  "rowFilter.y7_images.id": string;
  /** Format: text */
  "rowFilter.y7_images.file_name": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: character */
  "rowFilter.users.id": string;
  /** Format: timestamp without time zone */
  "rowFilter.users.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.users.updated_at": string;
  /** Format: jsonb */
  "rowFilter.users.counts": string;
  /** @description ratios */
  "body.ratios": definitions["ratios"];
  /** Format: bigint */
  "rowFilter.ratios.id": string;
  /** Format: timestamp without time zone */
  "rowFilter.ratios.created_at": string;
  /** Format: text */
  "rowFilter.ratios.text": string;
}

export interface operations {}

export interface external {}
